(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{411:function(t,n,a){"use strict";a.r(n);var s=a(10),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"循环依赖是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖是什么"}},[t._v("#")]),t._v(" 循环依赖是什么")]),t._v(" "),n("p",[t._v("Bean A 依赖 B，Bean B 依赖 A，这种情况下出现循环依赖：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Bean A → Bean B → Bean A\n")])])]),n("p",[t._v("更复杂的间接依赖造成的循环依赖如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nBean A → Bean B → Bean C → Bean D → Bean E → Bean A\n\n")])])]),n("h1",{attrs:{id:"循环依赖会产生什么结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖会产生什么结果"}},[t._v("#")]),t._v(" 循环依赖会产生什么结果")]),t._v(" "),n("p",[t._v("当 Spring 正在加载所有 Bean 时，Spring 尝试以能正常创建 Bean 的顺序去创建 Bean。例如，有如下依赖:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Bean A → Bean B → Bean C\n")])])]),n("p",[t._v("Spring 先创建 Bean C，接着创建 Bean B（将 C 注入 B 中），最后创建 Bean A（将 B 注入 A 中）。")]),t._v(" "),n("p",[t._v("但当存在循环依赖时，Spring 将无法决定先创建哪个 Bean。这种情况下，Spring 将产生异常 BeanCurrentlyInCreationException。")]),t._v(" "),n("h1",{attrs:{id:"spring-如何解决依赖循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-如何解决依赖循环"}},[t._v("#")]),t._v(" Spring 如何解决依赖循环")]),t._v(" "),n("p",[t._v("Spring 会自动解决部分情况下的依赖循环：")]),t._v(" "),n("ul",[n("li",[t._v("对于构造器注入的循环依赖，Spring 处理不了，会直接抛出 BeanCurrentlylnCreationException 异常")]),t._v(" "),n("li",[t._v("对于属性注入的循环依赖\n"),n("ul",[n("li",[t._v("单例模式：是通过三级缓存处理来循环依赖的")]),t._v(" "),n("li",[t._v("非单例模式：无法处理")])])])]),t._v(" "),n("p",[t._v("因此下面只分析单例模式下属性注入的循环依赖是怎么处理的。")]),t._v(" "),n("p",[t._v("首先，Spring 单例对象的初始化大略分为三步：")]),t._v(" "),n("ul",[n("li",[t._v("createBeanInstance：实例化 bean，使用构造方法创建对象，为对象分配内存")]),t._v(" "),n("li",[t._v("populateBean：进行依赖注入")]),t._v(" "),n("li",[t._v("initializeBean：初始化bean")])]),t._v(" "),n("p",[t._v("Spring 为了解决单例的循环依赖问题，使用了三级缓存：")]),t._v(" "),n("ul",[n("li",[t._v("singletonObjects：完成了初始化的单例对象 map，"),n("code",[t._v("bean name --\x3e bean instanceearly")])]),t._v(" "),n("li",[t._v("SingletonObjects：完成实例化未初始化的单例对象 map，"),n("code",[t._v("bean name --\x3e bean instance")])]),t._v(" "),n("li",[t._v("singletonFactories：单例对象工厂 map，"),n("code",[t._v("bean name --\x3e ObjectFactory")]),t._v("，单例对象实例化完成之后会加入 singletonFactories")])]),t._v(" "),n("p",[t._v("在调用 createBeanInstance 进行实例化之后，会调用 addSingletonFactory，将单例对象放到 singletonFactories 中。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSingletonFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectFactory")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" singletonFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singletonFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Singleton factory must not be null"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonFactories"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" singletonFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("earlySingletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("registeredSingletons"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("假如 A 依赖了 B 的实例对象，同时 B 也依赖 A 的实例对象：")]),t._v(" "),n("ol",[n("li",[t._v("A 首先完成了实例化，并且将自己添加到 singletonFactories 中")]),t._v(" "),n("li",[t._v("接着进行依赖注入，发现自己依赖对象 B，此时就尝试去"),n("code",[t._v("get(B)")])]),t._v(" "),n("li",[t._v("发现 B 还没有被实例化，对 B 进行实例化")]),t._v(" "),n("li",[t._v("然后 B 在初始化的时候发现自己依赖了对象 A，于是尝试"),n("code",[t._v("get(A)")]),t._v("，尝试一级缓存 singletonObjects 和二级缓存 earlySingletonObjects 没找到，尝试三级缓存 singletonFactories，由于 A 初始化时将自己添加到了 singletonFactories，所以 B 可以拿到 A 对象，然后将 A 从三级缓存中移到二级缓存中")]),t._v(" "),n("li",[t._v("B 拿到 A 对象后顺利完成了初始化，然后将自己放入到一级缓存 singletonObjects 中")]),t._v(" "),n("li",[t._v("此时返回 A 中，A 此时能拿到 B 的对象顺利完成自己的初始化")])]),t._v(" "),n("p",[t._v("由此看出，属性注入的循环依赖主要是通过将实例化完成的 bean 添加到 singletonFactories 来实现的。而使用构造器依赖注入的 bean 在实例化的时候会进行依赖注入，不会被添加到 singletonFactories 中。比如 A 和 B 都是通过构造器依赖注入，A 在调用构造器进行实例化的时候，发现自己依赖 B，B 没有被实例化，就会对 B 进行实例化，此时 A 未实例化完成，不会被添加到 singtonFactories。而 B 依赖于 A，B 会去三级缓存寻找 A 对象，发现不存在，于是又会实例化 A， A实例化了两次，从而导致抛异常。")]),t._v(" "),n("p",[t._v("总结：")]),t._v(" "),n("ol",[n("li",[t._v("利用缓存识别已经遍历过的节点")]),t._v(" "),n("li",[t._v("利用 Java 引用，先提前设置对象地址，后完善对象")])]),t._v(" "),n("h1",{attrs:{id:"如何解决依赖循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何解决依赖循环"}},[t._v("#")]),t._v(" 如何解决依赖循环")]),t._v(" "),n("p",[t._v("循环依赖是指两个或更多的组件之间存在着互相依赖的关系。在 SpringBoot 应用程序中，循环依赖通常是由以下几种情况引起的：")]),t._v(" "),n("ul",[n("li",[t._v("构造函数循环依赖： 两个或更多的组件在它们的构造函数中互相依赖")]),t._v(" "),n("li",[t._v("属性循环依赖： 两个或更多的组件在它们的属性中互相依赖")]),t._v(" "),n("li",[t._v("方法循环依赖： 两个或更多的组件在它们的方法中互相依赖")])]),t._v(" "),n("p",[t._v("针对这些情况，Spring 提供了一些解决循环依赖的方法：")]),t._v(" "),n("ul",[n("li",[t._v("Setter注入： 使用 setter 方法注入依赖项，而不是在构造函数中注入，这样只有当依赖被使用时才进行注入")]),t._v(" "),n("li",[t._v("延迟注入：使用"),n("code",[t._v("@Lazy")]),t._v("注解延迟加载依赖项。这样在注入依赖时，先注入代理对象，当首次使用时再创建对象完成注入")]),t._v(" "),n("li",[n("code",[t._v("@Autowired")]),t._v("注解的 required 属性： 将 required 属性设置为 false，以避免出现循环依赖问题。")]),t._v(" "),n("li",[n("code",[t._v("@DependsOn")]),t._v("注解：使用"),n("code",[t._v("@DependsOn")]),t._v("注解指定依赖项的加载顺序，以避免出现循环依赖问题")])]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("摘自：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://topjavaer.cn/framework/spring.html#spring%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring怎么解决循环依赖的问题？"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/qq_18298439/article/details/88818418",target:"_blank",rel:"noopener noreferrer"}},[t._v("Springboot循环依赖如何解决"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/638625895",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot循环依赖，如何解决？"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("站长略有修改")])])}),[],!1,null,null,null);n.default=e.exports}}]);